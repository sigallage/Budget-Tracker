export * from './managers/index.js';
export * from './models/index.js';
import { ActionsManager, AnomalyManager, AttackProtectionManager, BlacklistsManager, BrandingManager, ClientGrantsManager, ClientsManager, ConnectionsManager, CustomDomainsManager, DeviceCredentialsManager, EmailTemplatesManager, EmailsManager, FlowsManager, FormsManager, GrantsManager, GuardianManager, HooksManager, JobsManager, KeysManager, LogStreamsManager, LogsManager, NetworkAclsManager, OrganizationsManager, PromptsManager, RefreshTokensManager, ResourceServersManager, RolesManager, RulesManager, RulesConfigsManager, SelfServiceProfilesManager, SessionsManager, StatsManager, TenantsManager, TicketsManager, TokenExchangeProfilesManager, UserBlocksManager, UsersManager, UsersByEmailManager } from './managers/index.js';
import { Configuration } from '../../lib/runtime.js';
export declare abstract class ManagementClientBase {
    protected configuration: Configuration;
    readonly actions: ActionsManager;
    readonly anomaly: AnomalyManager;
    readonly attackProtection: AttackProtectionManager;
    readonly blacklists: BlacklistsManager;
    readonly branding: BrandingManager;
    readonly clientGrants: ClientGrantsManager;
    readonly clients: ClientsManager;
    readonly connections: ConnectionsManager;
    readonly customDomains: CustomDomainsManager;
    readonly deviceCredentials: DeviceCredentialsManager;
    readonly emailTemplates: EmailTemplatesManager;
    readonly emails: EmailsManager;
    readonly flows: FlowsManager;
    readonly forms: FormsManager;
    readonly grants: GrantsManager;
    readonly guardian: GuardianManager;
    readonly hooks: HooksManager;
    readonly jobs: JobsManager;
    readonly keys: KeysManager;
    readonly logStreams: LogStreamsManager;
    readonly logs: LogsManager;
    readonly networkAcls: NetworkAclsManager;
    readonly organizations: OrganizationsManager;
    readonly prompts: PromptsManager;
    readonly refreshTokens: RefreshTokensManager;
    readonly resourceServers: ResourceServersManager;
    readonly roles: RolesManager;
    readonly rules: RulesManager;
    readonly rulesConfigs: RulesConfigsManager;
    readonly selfServiceProfiles: SelfServiceProfilesManager;
    readonly sessions: SessionsManager;
    readonly stats: StatsManager;
    readonly tenants: TenantsManager;
    readonly tickets: TicketsManager;
    readonly tokenExchangeProfiles: TokenExchangeProfilesManager;
    readonly userBlocks: UserBlocksManager;
    readonly users: UsersManager;
    readonly usersByEmail: UsersByEmailManager;
    constructor(configuration: Configuration);
}
